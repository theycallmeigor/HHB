{%- liquid
  # Fallbacks / helpers
  assign product_form_id = product_form_id | default: 'product-form-' | append: section.id
  assign base_price = product.selected_or_first_available_variant.price

  assign cc_sub_id = cc_sub_override | default: ''
  assign has_selling_plans = product.selling_plan_groups.size > 0

  assign selling_plan_id = ''
  if has_selling_plans
    assign selling_plan_id = product.selling_plan_groups.first.selling_plans.first.id
  endif

  assign subscription_discount = block.settings.subscription_discount | default: 15
  assign subscribe_default     = block.settings.subscribe_selected_by_default | default: false

  # Gate rendering of the toggle
  assign show_subscription = false
  if block.settings.enable_subscription
    if block.settings.always_show_subscription or has_selling_plans or cc_sub_id != ''
      assign show_subscription = true
    endif
  endif
-%}

{%- if show_subscription -%}
  <div class="qb-purchase-type"
       data-subs-discount="{{ subscription_discount | escape }}"
       data-cc-sub-id="{{ cc_sub_id | escape }}"
       data-selling-plan-id="{{ selling_plan_id | escape }}">
    <div class="qb-purchase-type__row">
      {%- assign onetime_checked = true -%}
      {%- if subscribe_default -%}{%- assign onetime_checked = false -%}{%- endif -%}

      <!-- ONE-TIME -->
      <label class="qb-purchase-type__card">
        <input type="radio"
               name="purchase_type_{{ section.id }}"
               value="onetime"
               class="qb-purchase-type__input"
               {% if onetime_checked %}checked{% endif %}
               form="{{ product_form_id }}">
        <span class="qb-purchase-type__body">
          <span class="qb-radio"></span>
          <span class="qb-purchase-type__text">
            <span class="qb-purchase-type__title">
              {{ block.settings.onetime_label | default: 'One-Time Purchase' }}
            </span>
            <span class="qb-purchase-type__sub">
              {{ block.settings.onetime_sub | default: 'No refills. Stock may sell out.' }}
            </span>
          </span>
        </span>
      </label>

      <!-- SUBSCRIBE -->
      <label class="qb-purchase-type__card">
        <input type="radio"
               name="purchase_type_{{ section.id }}"
               value="subscribe"
               class="qb-purchase-type__input"
               {% unless onetime_checked %}checked{% endunless %}
               form="{{ product_form_id }}">
        <span class="qb-purchase-type__body">
          <span class="qb-radio"></span>
          <span class="qb-purchase-type__text">
            <span class="qb-purchase-type__title">
              {{ block.settings.subscribe_label | default: 'Save [discount]% with Auto-Refills' | replace: '[discount]', subscription_discount }}
            </span>
            <span class="qb-purchase-type__sub">
              {{ block.settings.subscribe_sub | default: 'Zero commitment. Cancel anytime.' }}
            </span>
          </span>
        </span>
      </label>
    </div>

    <!-- Frequency + hidden inputs -->
    <div class="qb-subscribe-details" {% if onetime_checked %}style="display:none"{% endif %}>
      <label for="subscription-frequency-{{ section.id }}" class="qb-subscribe-details__label">
        {{ block.settings.frequency_label | default: 'Deliver every' }}
      </label>
      <select id="subscription-frequency-{{ section.id }}"
              name="properties[subscription_frequency]"
              class="qb-subscribe-details__select"
              form="{{ product_form_id }}">
        <option value="15">15 days</option>
        <option value="30" selected>30 days</option>
        <option value="45">45 days</option>
        <option value="60">60 days</option>
        <option value="90">90 days</option>
      </select>
    </div>

    <!-- Hidden fields for cart/apps -->
    <input type="hidden" name="selling_plan" value="" data-selling-plan-input form="{{ product_form_id }}">
    <input type="hidden" name="properties[_subscription_enabled]" value="{% if onetime_checked %}false{% else %}true{% endif %}" data-subscription-enabled form="{{ product_form_id }}">
    <input type="hidden" name="properties[_cc_sub_id]" value="{{ cc_sub_id }}" data-cc-sub-id form="{{ product_form_id }}">
    <input type="hidden" name="properties[_subscription_discount]" value="{{ subscription_discount }}" data-subscription-discount form="{{ product_form_id }}">
  </div>

  <style>
    .qb-purchase-type__row{display:flex;gap:.75rem;margin:0 0 1rem}
    .qb-purchase-type__card{flex:1;cursor:pointer;position:relative}
    .qb-purchase-type__input{position:absolute;opacity:0;pointer-events:none}
    .qb-purchase-type__body{
      display:flex;align-items:center;gap:.6rem;padding:1rem;border:var(--border-width) solid rgba(var(--color-foreground),.2);
      border-radius:var(--border-radius);background:#fff;transition:.2s
    }
    .qb-purchase-type__card:hover .qb-purchase-type__body{border-color:var(--text-accent-color)}
    .qb-radio{width:20px;height:20px;border-radius:50%;border:2px solid var(--text-accent-color);display:inline-block;position:relative;flex:0 0 20px}
    .qb-radio:after{content:"";position:absolute;inset:4px;border-radius:50%;background:var(--text-accent-color);opacity:0;transition:.2s}
    .qb-purchase-type__input:checked + .qb-purchase-type__body{border-color:var(--text-accent-color);background:rgba(var(--color-foreground),.03)}
    .qb-purchase-type__input:checked + .qb-purchase-type__body .qb-radio:after{opacity:1}
    .qb-purchase-type__text{display:flex;flex-direction:column}
    .qb-purchase-type__title{font-weight:700;line-height:1.1}
    .qb-purchase-type__sub{font-size:.9rem;opacity:.8}
    .qb-subscribe-details{padding:1rem;border-radius:var(--border-radius);background:rgba(var(--color-foreground),.03);margin-bottom:1rem}
    .qb-subscribe-details__label{margin-right:.5rem;font-weight:600}
    .qb-subscribe-details__select{min-width:9rem}
    @media (max-width:749px){.qb-purchase-type__row{flex-direction:column}}
  </style>
{%- endif -%}

{%- comment -%} ---------- SUBSCRIPTION PRICE/FORM LOGIC (hooks into the radio-card toggle above) ---------- {%- endcomment -%}
<script>
(function() {
  const root = document.getElementById('quantity-breaks-{{ section.id }}');
  const toggleWrap = root?.previousElementSibling?.classList?.contains('qb-purchase-type')
    ? root.previousElementSibling
    : document.querySelector('.qb-purchase-type');

  if (!root || !toggleWrap) return;

  const moneyFormat = root.dataset.moneyFormat || '${{amount}}';
  const basePrice   = Number(root.dataset.basePrice || {{ base_price | json }});
  const subDiscount = Number(toggleWrap.dataset.subsDiscount || 15); // percent
  const sellingPlanId = toggleWrap.dataset.sellingPlanId || '';
  const ccSubId = toggleWrap.dataset.ccSubId || '';
  const sellingPlanInput = toggleWrap.querySelector('[data-selling-plan-input]');
  const propEnabledInput = toggleWrap.querySelector('[data-subscription-enabled]');
  const freqSelect = toggleWrap.querySelector('#subscription-frequency-{{ section.id }}');
  const detailsBox = toggleWrap.querySelector('.qb-subscribe-details');

  function formatMoney(cents) {
    try { if (window.Shopify && typeof Shopify.formatMoney === 'function') return Shopify.formatMoney(cents, moneyFormat); } catch(e){}
    return moneyFormat.replace('{{amount}}', (cents/100).toFixed(2));
  }

  // Recompute prices for each quantity card using its data-* attributes
  function refreshAllPrices(isSub) {
    root.querySelectorAll('.quantity-break').forEach(bar => {
      const qty          = Number(bar.dataset.quantity || 1);
      const percLeft     = Number(bar.dataset.percentageLeft || 1);
      const fixedDiscount= Number(bar.dataset.fixedDiscount || 0);
      const compareMode  = (bar.dataset.compareMode || 'compare_price');
      const baseCompare  = Number(bar.dataset.baseComparePrice || basePrice);

      const original     = Math.max(0, Math.round((basePrice * qty * percLeft) - fixedDiscount));
      const compareTotal = Math.round(((compareMode === 'compare_price' ? baseCompare : basePrice) * qty));
      const newTotal     = isSub ? Math.round(original * (1 - subDiscount/100)) : original;
      const newEach      = qty > 0 ? Math.round(newTotal / qty) : newTotal;
      const saved        = Math.max(0, (compareTotal > 0 ? compareTotal : original) - newTotal);

      // Update every element that has price template text
      bar.querySelectorAll('.variant-price-update[data-text]').forEach(el => {
        const tpl = el.dataset.text;
        el.innerHTML = tpl
          .replace(/\[price_each\]/g,     formatMoney(newEach))
          .replace(/\[price\]/g,          formatMoney(newTotal))
          .replace(/\[compare_price\]/g,  formatMoney(compareTotal))
          .replace(/\[amount_saved\]/g,   formatMoney(saved));
      });

      // Toggle compare visibility
      const cmp = bar.querySelector('.quantity-break__compare-price');
      if (cmp) (compareTotal <= newTotal) ? cmp.classList.add('hidden') : cmp.classList.remove('hidden');
    });
  }

  function applyPurchaseMode(mode){
    const isSub = mode === 'subscribe';
    if (detailsBox) detailsBox.style.display = isSub ? 'block' : 'none';
    if (propEnabledInput) propEnabledInput.value = String(isSub);
    if (sellingPlanInput) sellingPlanInput.value = isSub ? (sellingPlanId || '') : '';
    refreshAllPrices(isSub);

    // Optional: CheckoutChamp bridge
    const cc = window.CC || window.CheckoutChamp;
    if (cc && typeof cc.setSubscription === 'function') {
      try {
        cc.setSubscription({
          enabled: isSub,
          id: ccSubId || null,
          frequency: Number(freqSelect?.value || 30),
          discount: subDiscount
        });
      } catch(e){}
    }
  }

  // Initial state from checked radio
  const current = toggleWrap.querySelector('input[name="purchase_type_{{ section.id }}"]:checked')?.value || 'onetime';
  applyPurchaseMode(current);

  // Toggle listeners
  toggleWrap.querySelectorAll('input[name="purchase_type_{{ section.id }}"]').forEach(r => {
    r.addEventListener('change', e => applyPurchaseMode(e.target.value));
  });

  // Frequency change
  freqSelect?.addEventListener('change', () => {
    const checked = toggleWrap.querySelector('input[name="purchase_type_{{ section.id }}"]:checked')?.value === 'subscribe';
    if (checked) applyPurchaseMode('subscribe');
  });

  // Keep in sync if user changes quantity option
  root.addEventListener('change', (e) => {
    if (e.target?.name === 'quantity') {
      const isSub = toggleWrap.querySelector('input[name="purchase_type_{{ section.id }}"]:checked')?.value === 'subscribe';
      refreshAllPrices(isSub);
    }
  });
})();
</script>
<quantity-breaks
  class="quantity-breaks quantity-breaks--{{ block.settings.style }} accent-color-{{ block.settings.color_scheme }}{% if block.settings.space_images %} quantity-breaks--space-images{% endif %}{% if has_badge %} quantity-breaks--has-badge{% endif %}{% if block.settings.full_width_pickers %} quantity-breaks-full-width-pickers{% endif %} quantity-breaks--vertical-image-{{ block.settings.vertical_images_position }}{% if block.settings.display_selected_indicator %} quantity-breaks--show-indicator{% endif %}{% if block.settings.indicator_top == false %} quantity-breaks--indicator-bottom{% endif %}{% if block.settings.image_width == 100 %} quantity-breaks--max-width-images{% endif %}"
  id="quantity-breaks-{{ section.id }}"
  data-section="{{ section.id }}"
  data-items="{{ item_count }}"
  {% if has_second_option %}
    data-update-unavailable="true"
  {% endif %}
  data-update-prices="{{ block.settings.update_prices }}"
  data-update-pdp-prices="{{ block.settings.update_pdp_prices }}"
  data-money-format="{{ shop.money_format | escape }}"
  data-base-price="{{ product.selected_or_first_available_variant.price }}"
  data-skip-non-existent='true'
  data-skip-unavailable="{{ block.settings.skip_unavailable }}"
  {% if block.settings.scroll_media_gallery == false %}
    data-prevent-gallery-scroll="true"
  {% endif %}
  data-cc-ot-id="{{ cc_ot_override }}"
  data-cc-sub-id="{{ cc_sub_override }}"
  data-default-selling-plan="{{ default_selling_plan_id }}"
  style="--items-count:{{ item_count }};--image-width:{{ block.settings.image_width }}%;--border-radius:{{ block.settings.border_radius | divided_by: 10.0 }}rem;--border-width:{{ block.settings.border_width | divided_by: 10.0 }}rem;--text-accent-color:var(--color-base-{{ block.settings.accent_color }});--vertical-items-align:{{ block.settings.vertical_items_align }};{% if block.settings.hide_pickers_overlay %}--pickers-overlay-opacity:0;--pickers-hover-overlay-opacity:0;{% endif %}--margin-top: {{ block.settings.margin_top | divided_by: 10.0 }}rem;--margin-bottom: {{ block.settings.margin_bottom | divided_by: 10.0 }}rem;"
  {{ block.shopify_attributes }}
>
  {% if block.settings.headline != blank %}
    <h3 class="quantity-breaks__title flex-center center">
      <span></span>
      <span>{{ block.settings.headline }}</span>
      <span></span>
    </h3>
  {% endif %}

  {%- comment -%}
    Purchase options toggle (Subscribe vs One-time)
    - Non-intrusive: scoped styles to this instance ID.
    - Hidden inputs submit through the main product form.
    - cc_override_id bridges to CheckoutChamp override logic (read in meta-data.json and redirect script).
  {%- endcomment -%}
  <div class="qb-purchase-options" role="group" aria-label="Purchase options">
    {% if cc_sub_override != blank or has_selling_plans %}
      <button type="button" class="qb-purchase-option qb-purchase-option--subscription" data-option="subscription" aria-pressed="false">
        <span class="qb-purchase-option__title">
          {{ 'products.product.subscribe_and_save' | t | default: 'Subscribe & Save' }}
        </span>
        {% if subscription_subtext != blank %}
          <span class="qb-purchase-option__subtitle">{{ subscription_subtext }}</span>
        {% else %}
          <span class="qb-purchase-option__subtitle">{{ 'Delivered automatically' | t | default: 'Delivered automatically' }}</span>
        {% endif %}
      </button>
    {% endif %}
    <button type="button" class="qb-purchase-option qb-purchase-option--onetime is-active" data-option="one-time" aria-pressed="true">
      <span class="qb-purchase-option__title">
        {{ 'products.product.one_time_purchase' | t | default: 'One-time purchase' }}
      </span>
    </button>

    <input type="hidden" form="{{ product_form_id }}" name="properties[purchase_option]" value="one-time">
    <input type="hidden" form="{{ product_form_id }}" name="properties[cc_override_id]" value="">
    {% if has_selling_plans %}
      <input type="hidden" form="{{ product_form_id }}" name="selling_plan" value="">
    {% endif %}
  </div>

  <div class="quantity-breaks-container">
    {% for i in (1..4) %}
      {% liquid
        assign preselected = false
        assign offer_index = forloop.index
        case i
          when 1
            assign qty = block.settings.option_1_quantity
            assign badge = block.settings.option_1_badge
            assign badge_style = block.settings.option_1_badge_style
            assign badge_color = block.settings.option_1_badge_color
            assign image = block.settings.option_1_image
            assign label = block.settings.option_1_label
            assign benefit = block.settings.option_1_benefit
            assign benefit_position = block.settings.option_1_benefit_position
            assign benefit_style = block.settings.option_1_benefit_style
            assign benefit_radius = block.settings.option_1_benefit_radius | divided_by: 100.0 | times: 1.33
            assign benefit_color = block.settings.option_1_benefit_color
            assign caption = block.settings.option_1_caption
            assign percentage_off = block.settings.option_1_percentage_off_text
            assign fixed_off = block.settings.option_1_fixed_amount_off
            assign price_text = block.settings.option_1_price_text
            assign compare_mode = block.settings.option_1_compare_price
            assign compare_text = block.settings.option_1_compare_price_text
            if block.settings.preselected == 'option_1'
              assign preselected = true
            endif
          when 2
            assign qty = block.settings.option_2_quantity
            assign badge = block.settings.option_2_badge
            assign badge_style = block.settings.option_2_badge_style
            assign badge_color = block.settings.option_2_badge_color
            assign image = block.settings.option_2_image
            assign label = block.settings.option_2_label
            assign benefit = block.settings.option_2_benefit
            assign benefit_position = block.settings.option_2_benefit_position
            assign benefit_style = block.settings.option_2_benefit_style
            assign benefit_radius = block.settings.option_3_benefit_radius | divided_by: 100.0 | times: 1.33
            assign benefit_color = block.settings.option_2_benefit_color
            assign caption = block.settings.option_2_caption
            assign percentage_off = block.settings.option_2_percentage_off_text
            assign fixed_off = block.settings.option_2_fixed_amount_off
            assign price_text = block.settings.option_2_price_text
            assign compare_mode = block.settings.option_2_compare_price
            assign compare_text = block.settings.option_2_compare_price_text
            if block.settings.preselected == 'option_2'
              assign preselected = true
            endif
          when 3
            assign qty = block.settings.option_3_quantity
            assign badge = block.settings.option_3_badge
            assign badge_style = block.settings.option_3_badge_style
            assign badge_color = block.settings.option_3_badge_color
            assign image = block.settings.option_3_image
            assign label = block.settings.option_3_label
            assign benefit = block.settings.option_3_benefit
            assign benefit_position = block.settings.option_3_benefit_position
            assign benefit_style = block.settings.option_3_benefit_style
            assign benefit_radius = block.settings.option_3_benefit_radius | divided_by: 100.0 | times: 1.33
            assign benefit_color = block.settings.option_3_benefit_color
            assign caption = block.settings.option_3_caption
            assign percentage_off = block.settings.option_3_percentage_off_text
            assign fixed_off = block.settings.option_3_fixed_amount_off
            assign price_text = block.settings.option_3_price_text
            assign compare_mode = block.settings.option_3_compare_price
            assign compare_text = block.settings.option_3_compare_price_text
            if block.settings.preselected == 'option_3'
              assign preselected = true
            endif
          when 4
            assign qty = block.settings.option_4_quantity
            assign badge = block.settings.option_4_badge
            assign badge_style = block.settings.option_4_badge_style
            assign badge_color = block.settings.option_4_badge_color
            assign image = block.settings.option_4_image
            assign label = block.settings.option_4_label
            assign benefit = block.settings.option_4_benefit
            assign benefit_position = block.settings.option_4_benefit_position
            assign benefit_style = block.settings.option_4_benefit_style
            assign benefit_radius = block.settings.option_4_benefit_radius | divided_by: 100.0 | times: 1.33
            assign benefit_color = block.settings.option_4_benefit_color
            assign caption = block.settings.option_4_caption
            assign percentage_off = block.settings.option_4_percentage_off_text
            assign fixed_off = block.settings.option_4_fixed_amount_off
            assign price_text = block.settings.option_4_price_text
            assign compare_mode = block.settings.option_4_compare_price
            assign compare_text = block.settings.option_4_compare_price_text
            if block.settings.preselected == 'option_4'
              assign preselected = true
            endif
        endcase

        if qty > 0
          assign percentage = percentage_off | plus: 0
          assign percentage_left = 100 | minus: percentage | divided_by: 100.0
          assign fixed_discount = fixed_off | times: 100
  
          assign price = base_price | times: qty | times: percentage_left | minus: fixed_discount
  
          assign compare_price = base_price
          if compare_mode == 'compare_price' and product.selected_or_first_available_variant.compare_at_price > base_price
            assign compare_price = product.selected_or_first_available_variant.compare_at_price
          endif
          assign compare_total = compare_price | times: qty
          assign amount_saved = compare_total | minus: price
          assign amount_saved_rounded = amount_saved | divided_by: 100.0 | round | times: 100
          assign price_each = price | divided_by: qty
          assign compare_each = compare_total | divided_by: qty
        endif
      %}
      {% if qty > 0 %}
        <input
          id="quantity{{ i }}-{{ section.id }}"
          aria-label="Quantity"
          type="radio"
          name="quantity"
          value="{{ qty }}"
          form="{{ product_form_id }}"
          {% if preselected %}
            checked
          {% endif %}
          data-input="input_{{ i }}"
        >
        <label
          for="quantity{{ i }}-{{ section.id }}"
          class="quantity-break{% if badge != blank %} quantity-break--badge{% else %} quantity-break--no-badge{% endif %} quantity-break--badge-style-{{ badge_style }} quantity-break--benefit-{{ benefit_position }}"
          data-quantity="{{ qty }}"
          data-input="input_{{ i }}"
          data-base-compare-price="{{ compare_price }}"
          data-percentage-left="{{ percentage_left }}"
          data-fixed-discount="{{ fixed_discount }}"
          data-compare-mode="{{ compare_mode }}"
        >
          <div class="quantity-break__wrapper">
            {% if badge != blank %}
              <p class="quantity-break__badge dynamic-price variant-price-update color-{{ badge_color }}" data-text="{{ badge }}">
                {% render 'text-with-price',
                  text: badge,
                  quantity: qty,
                  price: price,
                  compare_price: compare_total,
                  amount_saved: amount_saved,
                  amount_saved_rounded: amount_saved_rounded,
                  price_each: price_each,
                  compare_price_each: compare_each
                %}
              </p>
            {% endif %}
          
            <div class='quantity-break__image-and-content'>
              {% if image != blank %}
                <div class='quantity-break__image'>
                  <img 
                    src='{{ image | image_url }}'
                    alt="{{ image.alt }}"
                    width='auto'
                    height='auto'
                    loading='lazy'
                  >
                </div>
              {% endif %}
          
              <div class="quantity-break__content">
                <div class="quantity-break__left">
                  <span class="quantity-break__label">
                    {% if label != blank %}
                      <span class="quantity-break__label-text dynamic-price variant-price-update" data-text="{{ label }}">
                        {% render 'text-with-price',
                          text: label,
                          quantity: qty,
                          price: price,
                          compare_price: compare_total,
                          amount_saved: amount_saved,
                          amount_saved_rounded: amount_saved_rounded,
                          price_each: price_each,
                          compare_price_each: compare_each
                        %}
                      </span>
                    {% endif %}
                    {% if benefit != blank %}
                      <span class="quantity-break__benefit quantity-break__benefit--{{ benefit_style }} accent-color-{{ benefit_color }} dynamic-price variant-price-update" data-text="{{ benefit }}" style="--benefit-border-radius:{{ benefit_radius }}em;">
                        {% render 'text-with-price',
                          text: benefit,
                          quantity: qty,
                          price: price,
                          compare_price: compare_total,
                          amount_saved: amount_saved,
                          amount_saved_rounded: amount_saved_rounded,
                          price_each: price_each,
                          compare_price_each: compare_each
                        %}
                      </span>
                    {% endif %}
                  </span>
          
                  {% if caption != blank %}
                    <span class="quantity-break__caption dynamic-price variant-price-update" data-text="{{ caption }}">
                      {% render 'text-with-price',
                        text: caption,
                        quantity: qty,
                        price: price,
                        compare_price: compare_total,
                        amount_saved: amount_saved,
                        amount_saved_rounded: amount_saved_rounded,
                        price_each: price_each,
                        compare_price_each: compare_each
                      %}
                    </span>
                  {% endif %}
                </div>
          
                <div class="quantity-break__right quantity-break__right--{{ block.settings.prices_layout }} dynamic-price">
                  {% if price_text != blank %}
                    <span class="quantity-break__price variant-price-update" data-text="{{ price_text }}">
                      {% render 'text-with-price',
                        text: price_text,
                        quantity: qty,
                        price: price,
                        compare_price: compare_total,
                        amount_saved: amount_saved,
                        amount_saved_rounded: amount_saved_rounded,
                        price_each: price_each,
                        compare_price_each: compare_each
                      %}
                    </span>
                  {% endif %}
                  {% if compare_text != blank %}
                    <span class="quantity-break__compare-price variant-price-update{% if compare_total <= price %} hidden{% endif %}" data-text="{{ compare_text }}">
                      {% render 'text-with-price',
                        text: compare_text,
                        quantity: qty,
                        price: price,
                        compare_price: compare_total,
                        amount_saved: amount_saved,
                        amount_saved_rounded: amount_saved_rounded,
                        price_each: price_each,
                        compare_price_each: compare_each
                      %}
                    </span>
                  {% endif %}
                </div>
              </div>
            </div>
            {% if product.has_only_default_variant == false and block.settings.enable_variant_selectors %}
              {% if qty != 1 or block.settings.enable_variant_selectors_on_quantity_of_1 %}
                <div class="quantity-break__variants">
                  {% assign has_variants = true %}
                  {% if block.settings.pickers_label != blank %}
                    <span class='quantity-break__variants__label'>
                      {{ block.settings.pickers_label }}
                    </span>
                  {% endif %}
                  {% for selectorItem in (1..qty) %}
                    <div
                      class="quantity-break__selector-item quantity-break__selector-item--variant-images-{{ block.settings.variant_images_position }}"
                      data-select-index="{{ forloop.index0 }}"
                      data-selected-id="{{ product.selected_or_first_available_variant.id }}"
                    >
                      <span class="quantity-break__selector-item__number">{{ block.settings.pickers_number_text | replace: '[index]', selectorItem }}</span>
                      {% for option in product.options_with_values %}
                        <div class="select select--small no-background color-{{ settings.pickers_color_scheme }} accent-color-{{ settings.pickers_overlay_color }} accent-2-color-{{ settings.pickers_text_color }}">
                          <select
                            class="quantity-break__variant-select select__select variant-dropdown"
                            name="options[{{ option.name | escape }}]"
                            data-product-id="{{ product.selected_or_first_available_variant.id }}"
                          >
                            {% for value in option.values %}
                              {% liquid
                                assign option_class = ''
                                assign option_disabled = true
                                assign option_exists = false
          
                                for option1_name in variants_option1_arr
                                  case option.position
                                    when 1
                                      if variants_option1_arr[forloop.index0] == value
                                        assign option_exists = true
                                        if variants_available_arr[forloop.index0]
                                          assign option_disabled = false
                                        endif
                                      endif
                                    when 2
                                      if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value
                                        assign option_exists = true
                                        if variants_available_arr[forloop.index0]
                                          assign option_disabled = false
                                        endif
                                      endif
                                    when 3
                                      if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value
                                        assign option_exists = true
                                        if variants_available_arr[forloop.index0]
                                          assign option_disabled = false
                                        endif
                                      endif
                                  endcase
                                endfor

                                assign hidden = false
                                if option_exists == false
                                  assign option_class = 'non-existent'
                                  assign hidden = true
                                elsif option_disabled == true
                                  assign option_class = 'unavailable'
                                  if block.settings.skip_unavailable
                                    assign hidden = true
                                  endif
                                endif
                              %}
                              <option
                                value="{{ value | escape }}"
                                {% if option.selected_value == value %}
                                  selected="selected"
                                {% endif %}
                                class="{{ option_class }}"
                                {% if hidden %}
                                  disabled hidden
                                {% endif %}
                              >
                                {% if option_disabled %}
                                  {{ 'products.product.value_unavailable' | t: option_value: value }}
                                {% else %}
                                  {{ value }}
                                {% endif %}
                              </option>
                            {% endfor %}
                          </select>
                          {% render 'icon-caret' %}
                        </div>
                      {% endfor %}
                      {% if block.settings.show_selected_variant_images %}
                        <div class="quantity-break__selector-item__image media media--transparent">
                          <img
                            src="{{ product.selected_or_first_available_variant.featured_image | image_url: width: 600 }}"
                            alt="{{ product.selected_or_first_available_variant.featured_image.alt }}"
                            width="auto"
                            height="auto"
                            loading="lazy"
                          >
                        </div>
                      {% endif %}
                    </div>
                  {% endfor %}
                </div>
              {% endif %}
            {% endif %}
          </div>
          
          {% if block.settings.style == 'normal' %}
            <quantity-break-upsells
              class="quantity-break__upsells-container"
              data-offer="{{ offer_index }}"
              data-last-offer="{{ last_offer_index }}"
              data-main-product="{{ product.handle }}"
              data-save-local-storage="true"
              data-section="{{ section.id }}"
            >
              <style>
                #quantity-breaks-{{ section.id }} .quantity-break__upsell--style-primary {
                  background: {{ block.settings.upsells_primary_style_bg_color }};
                  color: {{ block.settings.upsells_primary_style_text_color }};
                }
                #quantity-breaks-{{ section.id }} .quantity-break__upsell--style-secondary {
                  background: {{ block.settings.upsells_secondary_style_bg_color }};
                  color: {{ block.settings.upsells_secondary_style_text_color }};
                }
              </style>
              {% for i in (1..3) %}
                {% liquid
                  case i
                    when 1
                      assign upsell_product = block.settings.upsell_1_product
                      assign upsell_min_offer = block.settings.upsell_1_min_offer | plus: 0
                      assign upsell_type = block.settings.upsell_1_type
                      assign upsell_design = block.settings.upsell_1_design
                      assign upsell_image = block.settings.upsell_1_image
                      assign upsell_text_left = block.settings.upsell_1_text_left
                      assign upsell_text_right = block.settings.upsell_1_text_right
                      assign upsell_badge_text = block.settings.upsell_1_badge_text
                      assign upsell_badge_color_scheme = block.settings.upsells_primary_style_badge_color_scheme
                      if upsell_design == 'secondary'
                        assign upsell_badge_color_scheme = block.settings.upsells_secondary_style_badge_color_scheme
                      endif
                      assign badge_position = block.settings.upsell_1_badge_position
                    when 2
                      assign upsell_product = block.settings.upsell_2_product
                      assign upsell_min_offer = block.settings.upsell_2_min_offer | plus: 0
                      assign upsell_type = block.settings.upsell_2_type
                      assign upsell_design = block.settings.upsell_2_design
                      assign upsell_image = block.settings.upsell_2_image
                      assign upsell_text_left = block.settings.upsell_2_text_left
                      assign upsell_text_right = block.settings.upsell_2_text_right
                      assign upsell_badge_text = block.settings.upsell_2_badge_text
                      assign upsell_badge_color_scheme = block.settings.upsells_primary_style_badge_color_scheme
                      if upsell_design == 'secondary'
                        assign upsell_badge_color_scheme = block.settings.upsells_secondary_style_badge_color_scheme
                      endif
                      assign badge_position = block.settings.upsell_2_badge_position
                    when 3
                      assign upsell_product = block.settings.upsell_3_product
                      assign upsell_min_offer = block.settings.upsell_3_min_offer | plus: 0
                      assign upsell_type = block.settings.upsell_3_type
                      assign upsell_design = block.settings.upsell_3_design
                      assign upsell_image = block.settings.upsell_3_image
                      assign upsell_text_left = block.settings.upsell_3_text_left
                      assign upsell_text_right = block.settings.upsell_3_text_right
                      assign upsell_badge_text = block.settings.upsell_3_badge_text
                      assign upsell_badge_color_scheme = block.settings.upsells_primary_style_badge_color_scheme
                      if upsell_design == 'secondary'
                        assign upsell_badge_color_scheme = block.settings.upsells_secondary_style_badge_color_scheme
                      endif
                      assign badge_position = block.settings.upsell_3_badge_position
                  endcase
  
                  case upsell_min_offer
                    when 1
                      assign upsell_min_quantity = block.settings.option_1_quantity
                    when 2
                      assign upsell_min_quantity = block.settings.option_2_quantity
                    when 3
                      assign upsell_min_quantity = block.settings.option_3_quantity
                    when 4
                      assign upsell_min_quantity = block.settings.option_4_quantity
                    else
                      assign upsell_min_quantity = 1
                  endcase
                %}
                {% if upsell_product != blank and qty >= upsell_min_offer and upsell_product.available %}
                  {% liquid
                    assign is_checkbox = false
                    if upsell_type contains 'checkbox'
                      assign is_checkbox = true
                    endif
                    assign selected = true
                    if upsell_type == 'checkbox'
                      assign selected = false
                    endif
                  %}
                  {% capture price %}{{ upsell_product.price | money }}{% endcapture %}
                  {% capture compare_price %}<span style="text-decoration:line-through;">{{ upsell_product.compare_at_price | money }}</span>{% endcapture %}
                  {% capture amount_saved %}{{ upsell_product.compare_at_price | minus: upsell_product.price | money }}{% endcapture %}
                  {% capture amount_saved_rounded %}{{ upsell_product.compare_at_price | minus: upsell_product.price | divided_by: 100.0 | round | times: 100 | money }}{% endcapture %}
                  {% capture rendered_text_left %}
                    {{ upsell_text_left
                      | replace: '[title]', upsell_product.title
                      | replace: '[price]', price
                      | replace: '[compare_price]', compare_price
                      | replace: '[amount_saved]', amount_saved
                      | replace: '[amount_saved_rounded]', amount_saved_rounded
                    }}
                  {% endcapture %}
                  {% capture rendered_text_right %}
                    {{ upsell_text_right
                      | replace: '[title]', upsell_product.title
                      | replace: '[price]', price
                      | replace: '[compare_price]', compare_price
                      | replace: '[amount_saved]', amount_saved
                      | replace: '[amount_saved_rounded]', amount_saved_rounded
                    }}
                  {% endcapture %}
                  {% capture rendered_badge_text %}
                    {{ upsell_badge_text
                      | replace: '[title]', upsell_product.title
                      | replace: '[price]', price
                      | replace: '[compare_price]', compare_price
                      | replace: '[amount_saved]', amount_saved
                      | replace: '[amount_saved_rounded]', amount_saved_rounded
                    }}
                  {% endcapture %}
              
                  <div
                    class="quantity-break__upsell quantity-break__upsell--{{ upsell_type }} quantity-break__upsell--style-{{ upsell_design }}{% if block.settings.hide_upsells_on_non_selected %} quantity-break__upsell--hide-inactive{% endif %} gift--product-{{ upsell_product.handle }}"
                    data-toggle="{{ is_checkbox }}"
                    data-min-offer="{{ upsell_min_offer }}"
                    data-min-quantity="{{ upsell_min_quantity }}"
                    data-selected="{{ selected }}"
                    data-product="{{ upsell_product.first_available_variant.id }}"
                    data-handle="{{ upsell_product.handle }}"
                    data-type="{% if is_checkbox %}upsell{% else %}gift{% endif %}"
                    style="
                      --badge-radius: {{ block.settings.upsells_badge_radius | divided_by: 100.0 | times: 1.33 }}em;
                    "
                  >
                    <style>
                      .cart-item--product-{{ upsell_product.handle }} .quantity{% unless is_checkbox %}, .cart-item--product-{{ upsell_product.handle }} cart-remove-button{% endunless %} {
                        display: none;
                      }
                    </style>
                    {% if is_checkbox %}
                      {% render 'checkbox-icons' %}
                    {% endif %}
                    {% if upsell_image %}
                      <div class="quantity-break__upsell-image media media--transparent flex-shrink-0">
                        <img src="{{ upsell_image | image_url }}" loading="lazy" width="auto" height="auto" alt="{{ upsell_product.title | escape }}">
                      </div>
                    {% endif %}
                    <div class="quantity-break__upsell-content">
                      {% if rendered_text_left != blank %}
                        <div class="quantity-break__upsell-text">
                          {{ rendered_text_left }}
                        </div>
                      {% endif %}
                      {% if rendered_badge_text != blank %}
                        <div class="quantity-break__upsell-badge quantity-break__upsell-badge--{{ badge_position }} color-{{ upsell_badge_color_scheme }}">
                          {{ rendered_badge_text }}
                        </div>
                      {% endif %}
                      {% if rendered_text_right != blank %}
                        <div class="quantity-break__upsell-text quantity-break__upsell-text-right">
                          {{ rendered_text_right }}
                        </div>
                      {% endif %}
                    </div>
                    <product-form class='hidden' data-is-cart-upsell='true'>
                      {% assign upsell_product_form_id = 'GiftUpsellForm-' | append: section.id | append: block.id | append: offer_index | append: forloop.index %}
                      {%- form 'product',
                        upsell_product,
                        id: upsell_product_form_id,
                        class: 'form',
                        novalidate: 'novalidate',
                        data-type: 'add-to-cart-form'
                      -%}
                        <input type="hidden" name="id" value="{{ upsell_product.first_available_variant.id }}">
                        <button type='submit'>+</button>
                      {%- endform -%}
                    </product-form>
                  </div>
                {% endif %}
              {% endfor %}
            </quantity-break-upsells>
          {% endif %}
        </label>
      {% endif %}
    {% endfor %}
  </div>

  <script data-has-variants="{{ has_variants }}" type="application/json">
    {{ product.variants | json }}
  </script>

  <style>
    /* Scoped styles to preserve global theme layout */
    #quantity-breaks-{{ section.id }} .qb-purchase-options {
      display: flex;
      gap: 8px;
      align-items: stretch;
      margin: 8px 0 12px;
      flex-wrap: wrap;
    }
    #quantity-breaks-{{ section.id }} .qb-purchase-option {
      appearance: none;
      border: 1.5px solid rgba(0,0,0,0.15);
      background: rgba(0,0,0,0.03);
      color: inherit;
      border-radius: 999px;
      padding: 10px 14px;
      line-height: 1.1;
      display: inline-flex;
      flex-direction: column;
      justify-content: center;
      cursor: pointer;
      transition: border-color .2s ease, background-color .2s ease, box-shadow .2s ease;
    }
    #quantity-breaks-{{ section.id }} .qb-purchase-option__title {
      font-weight: 600;
      font-size: 0.95rem;
      white-space: nowrap;
    }
    #quantity-breaks-{{ section.id }} .qb-purchase-option__subtitle {
      font-size: 0.8rem;
      opacity: .7;
      white-space: nowrap;
    }
    #quantity-breaks-{{ section.id }} .qb-purchase-option.is-active {
      background: #fff;
      border-color: rgba(109,56,139,0.6);
      box-shadow: 0 0 0 3px rgba(109,56,139,0.12);
    }
    @media (prefers-color-scheme: dark) {
      #quantity-breaks-{{ section.id }} .qb-purchase-option {
        border-color: rgba(255,255,255,0.2);
        background: rgba(255,255,255,0.06);
      }
      #quantity-breaks-{{ section.id }} .qb-purchase-option.is-active {
        background: rgba(255,255,255,0.1);
        border-color: rgba(255,255,255,0.4);
        box-shadow: 0 0 0 3px rgba(255,255,255,0.12);
      }
    }
  </style>

  <script>
    (function() {
      var root = document.getElementById('quantity-breaks-{{ section.id }}');
      if (!root) return;

      var oneTimeBtn = root.querySelector('.qb-purchase-option--onetime');
      var subBtn = root.querySelector('.qb-purchase-option--subscription');

      var purchaseInput = root.querySelector('input[name="properties[purchase_option]"][form="{{ product_form_id }}"]');
      var ccOverrideInput = root.querySelector('input[name="properties[cc_override_id]"][form="{{ product_form_id }}"]');
      var sellingPlanInput = root.querySelector('input[name="selling_plan"][form="{{ product_form_id }}"]');

      var otId = root.getAttribute('data-cc-ot-id') || '';
      var subId = root.getAttribute('data-cc-sub-id') || '';
      var defaultPlan = root.getAttribute('data-default-selling-plan') || '';

      function setActive(which) {
        if (oneTimeBtn) {
          oneTimeBtn.classList.toggle('is-active', which === 'one-time');
          oneTimeBtn.setAttribute('aria-pressed', which === 'one-time' ? 'true' : 'false');
        }
        if (subBtn) {
          subBtn.classList.toggle('is-active', which === 'subscription');
          subBtn.setAttribute('aria-pressed', which === 'subscription' ? 'true' : 'false');
        }
      }

      function updateHidden(which) {
        if (!purchaseInput || !ccOverrideInput) return;
        purchaseInput.value = which;

        if (which === 'subscription') {
          if (sellingPlanInput) sellingPlanInput.value = defaultPlan || '';
          ccOverrideInput.value = subId || '';
        } else {
          if (sellingPlanInput) sellingPlanInput.value = '';
          ccOverrideInput.value = otId || '';
        }
      }

      if (oneTimeBtn) {
        oneTimeBtn.addEventListener('click', function() {
          setActive('one-time');
          updateHidden('one-time');
        });
      }
      if (subBtn) {
        subBtn.addEventListener('click', function() {
          setActive('subscription');
          updateHidden('subscription');
        });
      }

      // Initialize default state (one-time by default)
      setActive('one-time');
      updateHidden('one-time');
    })();
  </script>
</quantity-breaks>
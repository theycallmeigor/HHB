{%- comment %}
  Enhanced redirect cart that properly passes products to checkout
  Now with subscription support using custom.cc_sub_products metafield
  @param cart (cart, mandatory)
  @param checkout_url (string, mandatory) the checkout url
  @param checkout_button_selector (string) the query selector for the checkout button
{% endcomment -%}

{% unless checkout_url %}
  {% assign checkout_url = 'https://checkout.hollywoodhairbar.co/checkout' %}
{% endunless %}

{% unless checkout_button_selector %}
  {% assign checkout_button_selector = '.upez-btn--checkout, [type="submit"][name="checkout"]' %}
{% endunless %}

<script>
document.addEventListener("DOMContentLoaded", function () {
  var debug = true ? console.log.bind(console, '[DEBUG][RedirectCart]') : function () {};

  debug('Script loaded - Enhanced Version with Subscription Support (cc_sub_products)');

  window.RedirectCart = function (options) {
    var self = {};

    function init() {     
      self.options = Object.assign({
        checkoutButtonSelector: '{{ checkout_button_selector }}',
        checkoutUrl: '{{ checkout_url }}'
      }, options);

      debug('Initialized with options', self.options);
      inject();
    }

    function inject() {
      debug('Injecting event listeners');
      
      // Use vanilla JS for better compatibility
      document.querySelectorAll(self.options.checkoutButtonSelector).forEach(function(button) {
        button.addEventListener('click', checkout);
        debug('Added listener to button:', button);
      });

      // Also catch dynamically added buttons
      document.addEventListener('click', function(event) {
        if (event.target.matches(self.options.checkoutButtonSelector) || 
            event.target.closest(self.options.checkoutButtonSelector)) {
          checkout(event);
        }
      });
    }

    function checkout(event) {
      event.preventDefault();
      event.stopPropagation();
      
      debug('Checkout triggered');
      
      // Check subscription status before proceeding
      var isSubscribed = checkSubscriptionStatus();
      debug('Subscription status:', isSubscribed);
      
      // First try the meta-data view, fallback to regular cart.json
      fetchCartData()
        .then(function(data) {
          var checkoutUrl = getCheckoutURL(data, isSubscribed);
          debug('Final Checkout URL:', checkoutUrl);
          window.location.href = checkoutUrl;
        })
        .catch(function(error) {
          console.error('[RedirectCart] Error:', error);
          // Fallback to basic redirect
          window.location.href = self.options.checkoutUrl;
        });
    }

    function checkSubscriptionStatus() {
      // Check if subscription checkbox is checked
      var subscriptionCheckbox = document.getElementById('subscription-toggle-checkbox');
      var subscriptionValue = document.getElementById('subscription-value');
      
      if (subscriptionCheckbox && subscriptionCheckbox.checked) {
        debug('Subscription checkbox is checked');
        return true;
      }
      
      if (subscriptionValue && subscriptionValue.value === 'true') {
        debug('Subscription value is true');
        return true;
      }
      
      // Also check for subscription in form data
      var form = document.querySelector('form[action*="/cart/add"]');
      if (form) {
        var subscriptionInput = form.querySelector('input[name="properties[_subscription]"]');
        if (subscriptionInput && subscriptionInput.value === 'true') {
          debug('Subscription property found in form');
          return true;
        }
      }
      
      return false;
    }

    function fetchCartData() {
      // Try custom view first, then fallback to standard cart
      return fetch('/cart?view=subscription.json')
        .then(function(response) {
          if (!response.ok) {
            throw new Error('Subscription view not found');
          }
          return response.json();
        })
        .then(function(data) {
          debug('Subscription cart loaded:', data);
          return { type: 'subscription', data: data };
        })
        .catch(function() {
          debug('Falling back to standard cart.json');
          return fetch('/cart.json')
            .then(function(response) { return response.json(); })
            .then(function(cart) {
              debug('Standard cart loaded:', cart);
              return { type: 'standard', data: cart };
            });
        });
    }

    function getCheckoutURL(cartData, isSubscribed) {
      var cookie = getCartCookie('cart');
      var affId = getCartCookie('affId') || getUrlParam('affId');
      var urlLineItems = '';
      
      if (cartData.type === 'subscription' && cartData.data.meta_product_id_array) {
        // Use subscription cart format with cc_sub_products support
        urlLineItems = cartData.data.meta_product_id_array.map(function(item) {
          var itemId = item.id;
          
          // If subscribed and subscription product ID exists, use it instead
          if (isSubscribed && item.subscription_product_id) {
            itemId = item.subscription_product_id;
            debug('Using subscription product ID:', itemId, 'instead of:', item.id);
          }
          
          return itemId + ':' + item.quantity;
        }).filter(function(item) { return item; }).join(';');
        
      } else if (cartData.type === 'standard' && cartData.data.items) {
        // Use standard cart format with cc_sub_products support
        urlLineItems = cartData.data.items.map(function(item) {
          var productId = item.variant_id || item.id || item.product_id;
          var quantity = item.quantity;
          
          // Check for subscription product ID if subscribed
          if (isSubscribed) {
            // Priority 1: Check for cc_sub_products in properties
            if (item.properties && item.properties._subscription_product_id) {
              productId = item.properties._subscription_product_id;
              debug('Using subscription product ID from properties:', productId);
            }
            // Priority 2: Check if subscription product was passed through cart attributes
            else if (item.subscription_product_id) {
              productId = item.subscription_product_id;
              debug('Using subscription product ID from item:', productId);
            }
            // Priority 3: Try to get from Liquid directly for current cart items
            else {
              var subscriptionProductId = getSubscriptionProductFromLiquid(item.product_id);
              if (subscriptionProductId) {
                productId = subscriptionProductId;
                debug('Using subscription product ID from liquid:', productId);
              }
            }
          }
          
          return productId + ':' + quantity;
        }).join(';');
        
      } else {
        // Fallback: try to extract from current cart items with subscription support
        urlLineItems = extractFromCartItems(isSubscribed);
      }

      debug('Line items for checkout:', urlLineItems);

      // Build URL with parameters
      var params = new URLSearchParams();
      
      if (urlLineItems) {
        params.append('products', urlLineItems);
      }
      
      if (cookie) {
        params.append('cartId', cookie);
      }
      
      if (affId) {
        params.append('affId', affId);
      }
      
      // Add subscription flag if active
      if (isSubscribed) {
        params.append('subscription', 'true');
        
        // Add subscription discount if available
        var subscriptionDiscount = document.getElementById('subscription-discount-value');
        if (subscriptionDiscount && subscriptionDiscount.value) {
          params.append('subscription_discount', subscriptionDiscount.value);
        }
        
        // Add subscription frequency if selected
        var subscriptionFrequency = document.getElementById('subscription-frequency');
        if (subscriptionFrequency && subscriptionFrequency.value) {
          params.append('subscription_frequency', subscriptionFrequency.value);
        }
      }
      
      // Add discount code if present
      if (cartData.data && cartData.data.discount_applications && cartData.data.discount_applications.length > 0) {
        params.append('discount', cartData.data.discount_applications[0].title);
      } else if (cartData.data && cartData.data.cart_level_discount_applications && cartData.data.cart_level_discount_applications.length > 0) {
        params.append('discount', cartData.data.cart_level_discount_applications[0].title);
      }

      var finalUrl = self.options.checkoutUrl + '?' + params.toString();
      return finalUrl;
    }
    
    function getSubscriptionProductFromLiquid(productId) {
      // This function tries to get subscription product ID from Liquid-generated data
      var subscriptionProducts = {
        {%- for item in cart.items -%}
          {%- if item.product.metafields.custom.cc_sub_products -%}
            '{{ item.product_id }}': '{{ item.product.metafields.custom.cc_sub_products }}',
          {%- endif -%}
        {%- endfor -%}
      };
      
      return subscriptionProducts[productId] || null;
    }

    function extractFromCartItems(isSubscribed) {
      // Fallback method using Liquid to generate product list with subscription support
      var items = [];
      {%- for item in cart.items -%}
        {%- liquid
          assign item_id = item.variant_id | default: item.id
          assign has_subscription_product = false
          assign subscription_product_id = nil
          
          if item.product.metafields.custom.cc_sub_products
            assign has_subscription_product = true
            assign subscription_product_id = item.product.metafields.custom.cc_sub_products
          endif
        -%}
        
        {%- if has_subscription_product -%}
          // Item has subscription product available
          if (isSubscribed && {{ item.properties._subscription | json }} === 'true') {
            items.push('{{ subscription_product_id }}:{{ item.quantity }}');
          } else {
            items.push('{{ item_id }}:{{ item.quantity }}');
          }
        {%- else -%}
          // Regular item without subscription option
          items.push('{{ item_id }}:{{ item.quantity }}');
        {%- endif -%}
      {%- endfor -%}
      
      return items.join(';');
    }

    function getCartCookie(name) {
      var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
      return match ? match[2] : null;
    }

    function getUrlParam(name) {
      var params = new URLSearchParams(window.location.search);
      return params.get(name);
    }

    init();
    return self;
  };

  // Create instance
  var instance = new RedirectCart();
  
  // Listen for subscription changes to update cart data
  document.addEventListener('subscription:change', function(event) {
    debug('Subscription state changed:', event.detail);
    // Store subscription state for checkout
    if (event.detail.subscribed) {
      sessionStorage.setItem('subscription_active', 'true');
      sessionStorage.setItem('subscription_discount', event.detail.discount);
    } else {
      sessionStorage.removeItem('subscription_active');
      sessionStorage.removeItem('subscription_discount');
    }
  });
  
  // Listen for add to cart events to inject subscription product ID if needed
  document.addEventListener('cart:add', function(event) {
    if (event.detail && event.detail.items) {
      debug('Cart add event detected, checking for subscription products');
      
      var isSubscribed = checkSubscriptionStatus();
      if (isSubscribed) {
        // Update cart with subscription product IDs
        event.detail.items.forEach(function(item) {
          var subscriptionProductId = getSubscriptionProductFromLiquid(item.product_id);
          if (subscriptionProductId) {
            item.properties = item.properties || {};
            item.properties._subscription_product_id = subscriptionProductId;
            debug('Added subscription product ID to cart item:', subscriptionProductId);
          }
        });
      }
    }
  });
});
</script>